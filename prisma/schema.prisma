// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String
  email         String    @unique
  password      String
  emailVerified DateTime?
  avatar        String?
  description   String?   @default("这个人很懒什么都没留下")
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// blog 

model Comment {
  id         String    @unique @default(cuid())
  blog       Blog?     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogId     String?
  content    String?
  User       User      @relation(fields: [userId], references: [id])
  type       Int? // 0为管理员评论 1为访客评论 未登录不允许评论
  createTime DateTime? @default(now())
  // replyComents
  userId     String
}

model Blog {
  id           String    @id @default(cuid())
  title        String?
  content      String?
  firstPicture String?
  ups          Int?      @default(0)
  downs        Int?
  views        Int?      @default(0)
  commentabled Boolean?  @default(true)
  published    Boolean?
  createTime   DateTime? @default(now())
  updateTime   DateTime?
  type         Type?     @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags         Tag[]
  comments     Comment[]
  description  String?
  typeId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String?
}

model Type {
  id    String @id @default(cuid())
  name  String
  blogs Blog[]
}

model Tag {
  id    String @id @default(cuid())
  name  String
  blogs Blog[]
}
